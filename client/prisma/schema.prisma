// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  clerkId     String   @unique
  displayName String
  email       String   @unique
  avatar      String?
  plan        String   @default("free")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  createdProjects  Project[]         @relation("CreatedByUser")
  tasks            Task[]            @relation("UserTasksAssigned")
  createdTasks     Task[]            @relation("UserTasksCreated")
  notes            Note[]
  files            File[]
  whiteboards      Whiteboard[]
  videoCalls       VideoCall[]
  callParticipants CallParticipant[]
  projectMembers   ProjectMember[]
  invitesReceived  ProjectInvite[]   @relation("UserInvitesReceived")
  invitesSent      ProjectInvite[]   @relation("UserInvitesSent")
  notifications    Notification[]
}




model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  createdAt   DateTime @default(now())
  createdBy   String   @db.ObjectId
  visibility  String
  projectType String
  startDate   DateTime @default(now())
  dueDate     DateTime
  tags        String[]
  color       String

  // Relations
  creator     User      @relation("CreatedByUser", fields: [createdBy], references: [id])
  members     ProjectMember[]
  invites     ProjectInvite[]
  files       File[]
  notes       Note[]
  whiteboards Whiteboard[]
  tasks       Task[]
  videoCalls  VideoCall[]
}
model ProjectInvite {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId     String   @db.ObjectId
  invitedUserId String   @db.ObjectId
  inviterId     String   @db.ObjectId
  permissions   Json
  status        String   @default("pending") // pending, accepted, declined
  createdAt     DateTime @default(now())
  expiresAt     DateTime?
  acceptedAt    DateTime?

  project     Project @relation(fields: [projectId], references: [id])
  invitedUser User    @relation("UserInvitesReceived", fields: [invitedUserId], references: [id])
  inviter     User    @relation("UserInvitesSent", fields: [inviterId], references: [id])
  notifications Notification[]
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  inviteId  String?  @db.ObjectId  // link to ProjectInvite if notification is about invite
  type      String   // invite, message, update
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user   User          @relation(fields: [userId], references: [id])
  invite ProjectInvite? @relation(fields: [inviteId], references: [id])
}




model ProjectMember {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId   String   @db.ObjectId
  userId      String   @db.ObjectId
  role        String
  permissions Json
  joinedAt    DateTime @default(now())
  project     Project  @relation(fields: [projectId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model File {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId  String   @db.ObjectId
  uploadedBy String   @db.ObjectId
  name       String
  type       String
  size       Float
  url        String
  version    Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  project    Project  @relation(fields: [projectId], references: [id])
  user       User     @relation(fields: [uploadedBy], references: [id])
}

model Note {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId String   @db.ObjectId
  createdBy String   @db.ObjectId
  title     String
  content   String
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [createdBy], references: [id])
}

model Whiteboard {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId    String   @db.ObjectId
  lastEditedBy String   @db.ObjectId
  data         Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  project      Project  @relation(fields: [projectId], references: [id])
  user         User     @relation(fields: [lastEditedBy], references: [id])
}

model Task {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  projectId   String    @db.ObjectId
  createdBy   String    @db.ObjectId
  assignedTo  String    @db.ObjectId
  title       String
  description String
  status      String    @default("todo")
  priority    String?
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  project     Project   @relation(fields: [projectId], references: [id])
  creator     User      @relation("UserTasksCreated", fields: [createdBy], references: [id])
  assignee    User      @relation("UserTasksAssigned", fields: [assignedTo], references: [id])
}

model VideoCall {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  projectId    String            @db.ObjectId
  startedBy    String            @db.ObjectId
  startedAt    DateTime          @default(now())
  endedAt      DateTime?
  sessionToken String
  recordingUrl String?
  project      Project           @relation(fields: [projectId], references: [id])
  user         User              @relation(fields: [startedBy], references: [id])
  participants CallParticipant[]
}

model CallParticipant {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  callId    String    @db.ObjectId
  userId    String    @db.ObjectId
  joinedAt  DateTime  @default(now())
  leftAt    DateTime?
  videoCall VideoCall @relation(fields: [callId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}
